[
  {
    "objectID": "posts/특강_1주차.html",
    "href": "posts/특강_1주차.html",
    "title": "1일차 과제",
    "section": "",
    "text": "컴퓨터는 폴더임.\n\n\n\n\n\n가상의 컴퓨터(꼭 필요한 폴더 집합)를 만드는 것임.\nlike 사용자 계정 추가\n각각의 가상환경 & 컴퓨터는 독립적임\n\n\n\n\n\n가상 환경을 만들어주는 프로그램.\n본인이 원하는 환경 만들고 싶음 만들 수 있음.(ex : conda create –name &lt;가상환경이름&gt; python=3.8)\n\n- [정리]\n- 컴퓨터 == 폴더 집합\n- 가상환경 == 가상의 컴퓨터 == 폴더\n- 아나콘다는 가상환경을 만들어주는 프로그램\n- 그럼 가상환경 어디에 설치되어 있는데?\n- anaconda3 &gt; envs\n- 가상환경 폴더를 삭제 or 다른 경로로 이동하면? -&gt; 가상환경 사라지는거임 ㅇㅇ"
  },
  {
    "objectID": "posts/특강_1주차.html#컴퓨터",
    "href": "posts/특강_1주차.html#컴퓨터",
    "title": "1일차 과제",
    "section": "",
    "text": "컴퓨터는 폴더임."
  },
  {
    "objectID": "posts/특강_1주차.html#가상환경이란",
    "href": "posts/특강_1주차.html#가상환경이란",
    "title": "1일차 과제",
    "section": "",
    "text": "가상의 컴퓨터(꼭 필요한 폴더 집합)를 만드는 것임.\nlike 사용자 계정 추가\n각각의 가상환경 & 컴퓨터는 독립적임"
  },
  {
    "objectID": "posts/특강_1주차.html#아나콘다",
    "href": "posts/특강_1주차.html#아나콘다",
    "title": "1일차 과제",
    "section": "",
    "text": "가상 환경을 만들어주는 프로그램.\n본인이 원하는 환경 만들고 싶음 만들 수 있음.(ex : conda create –name &lt;가상환경이름&gt; python=3.8)\n\n- [정리]\n- 컴퓨터 == 폴더 집합\n- 가상환경 == 가상의 컴퓨터 == 폴더\n- 아나콘다는 가상환경을 만들어주는 프로그램\n- 그럼 가상환경 어디에 설치되어 있는데?\n- anaconda3 &gt; envs\n- 가상환경 폴더를 삭제 or 다른 경로로 이동하면? -&gt; 가상환경 사라지는거임 ㅇㅇ"
  },
  {
    "objectID": "posts/특강_1주차.html#python-개발환경-발전-과정",
    "href": "posts/특강_1주차.html#python-개발환경-발전-과정",
    "title": "1일차 과제",
    "section": "Python 개발환경 발전 과정",
    "text": "Python 개발환경 발전 과정\n\n이해를 위해 임의로 5세대로 구분함\n\n\n1세대\n\npython, ipython\n\n\npython\n\nif 아나콘다 설치한 경우 -&gt; anaconda prompt 실행 &gt; python 입력 &gt; prompt 창에서 파이썬 실행 가능한\nelif 노트북에 파이썬 설치한 경우 -&gt; 명령prompt 실행 &gt; python 입력 &gt; python 실행 가능한\n\n- 2개의 prompt를 사용해 파이썬 코드를 실행할 수 있음. but, 각각의 prompt는 독립적\n-&gt; so, 변수 공유 can’t\n- ?sort와 같은 도움말 기능 x, 구문 강조 기능 x, 자동 들여쓰기x\n- 한 번 실행 or 줄 바꿈 했을 경우, 틀린 부분이 있다면 그냥 망한거임. 처음부터 끝까지 코드 다시 쳐야 함…\n\n\nipython\n얘는 그냥 python깔면 깔리는건 아닌것 같음.\n- 자동 들여쓰기 o, 구문강조 0 , 도움말 o, 줄바꿈 했어도 방향키 조절로 틀린 부분 수정 가능\n- but, prompt 한번 끄면 이전 코드 다 없어짐. -&gt; 코드 관리가 어려움.\n\n\n\n2세대\n\n메모장 + anaconda prompt 이용(.py를 이용한 python 활용)\nfocus : 마우스를 이용한 코드 편집 가능, 코드 관리 용이성(저장되어 있으면 좋겠음)\n\n- 역할\n- 메모장 == 코드 편집 & 저장 - prompt == 계산기\n- 실행방법\n- 메모장 확장자를 .py로 변경\n- prompt에서 해당 메모장이 저장된 경로로 이동\n- 실행 : python 메모장이름.py\n- [정리]\n- 마우스로 코드 편집 가능 & 메모장(코드 편집기)가 저장되어 있음 == 코드가 저장되어 있음\n- but, 단점 == 구문강조 x, 도움말 x\n\n\n3세대\n\n메모장 + ipython\n!python 메모장 이름.py\n%run 메모장 이름\n\n- 메모장(코드 편집 & 저장) 사용하는건 동일\n- but, ipython 사용\n- anaconda prompt처럼 코드 실행 및 결과 확인 기능 있어야함.\n- ipython 장점은 have -&gt; 구문강조 o , 도움말 o\n- 어떻게 하냐?\n- ipython 실행\n- !python 메모장이름.py\n- 이게 어떻게 가능하냐?\n- !(느낌표)의 기능 주목\n- !python 메모장이름.py\n- 원래 ipython 환경이었지만, 해당 내용을 새로운 prompt(ipython X)에서 해당 코드 내용을 실행하고 결괏값을 현재 anaconda 창에 띄워주는거임\n- so, 변수는 공유되지 않음 (각각의 prompt는 독립적 &lt;1세대 설명 참고&gt;)\n- 변수 공유 필요하다?\n- %run 메모장 이름 입력\n- 얘는 메모장의 내용을, 현재 prompt 에 복붙하고, 결과만 출력하는 것과 같은 효과임\n\n\n4세대\n\nIDE(통합개발환경) == 메모장 + ipython 한방에~\n\n- 주피터로 예를 들어 설명 (모든 IDE 같은 논리임)\n- 주피터는 그냥 입출력을 깔끔하게 보여주는 인터페이스임.\n- 계산은 ipython이 다함.\n- cell 하나가 하나의 메모장임.\n- cell의 내용을 ipython이 계산 & 결괏값 출력 - 주피터가 그 결괏값을 복사 해와서 user한테 보여줌.\n=&gt; prompt는 하나니깐, 변수 공유 가능한. 메모장만 여러개인 거임.\n- 커널 재시작\n- prompt를 끄고 새창을 키는것과 같음\n- 커널 정지?(무튼 네모 누르기)\n- prompt에서 ctrl + c 누르는 효과와 같음\n- [정리]\n- IDE는 그냥 복붙해주는 인터페이스임, 연산 기능 x\n- 실제 연산은 python, or R이 다 함\n- 때문에, IDE만 설치한다고 해서 연산을 수행할 수 x, 무조건 R이나 python을 먼저 설치하고 IDE를 실행할 수 있음\n- 하나의 IDE가 여러 언어와 연결될 수 있음\n\n\n5세대 : 가상컴퓨터(anaconda), 원격 컴퓨터(server), 클라우드 컴퓨터(colab)\n\n가상컴퓨터\n- 위 1.가상환경에서 정리한 내용과 같음\n\n\n원격 컴퓨터\n\nipython이 실행되는 컴퓨터와 크롬이 실행되는 컴퓨터가 동일하지 않아도 인터넷에만 연결되어 있으면 작동\n\n- 방법1 : just 원격 컴퓨터\n- 좋은 성능을 가진 컴퓨터를 여러명이 공유해서 사용하는 것.\n- 메모장 == 내 노트북 IDE\n- 실제 python or R이 실행되는 곳 == 원격 컴퓨터 prompt\n- 이제까지의 IDE 환경에서의 코드 작동 매커니즘과 같지만, python이 어디서 실행되는지만 다름\n- 논리적 분리가 안되어있기 때문에, 누군가 돌이킬 수 없는 강을 건너면 서버를 공유하고 있는 모든 사람이 서버를 사용하지 못하게 될 수 있음\n- 방법 2 : 원격컴퓨터 + 가상환경\n- 서버를 논리적으로 나누기 (가상환경과 같음)\n- 코드를 실현하는 매커니즘은 방법1과 같음\n- but, 가상환경과 같이 분리가 되어있기 때문에 문제가 발생했을 경우, 다른 user에게 영향 x just 해당하는 환경만 삭제해주면됨.\n\n\n클라우드 컴퓨터\n- 클라우드 컴퓨터가 뭔데?\n- 성능이 그저그런 컴퓨터 여러개를 모아서, user에게 할당\n- ex) m개의 컴퓨터를 n명의 user에게 할당 -&gt; 1인당 m/n 대 할당"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog_trial",
    "section": "",
    "text": "1일차 과제\n\n\n\n\n\n\n\nData_ToolBox\n\n\n\n\n\n\n\n\n\n\n\nJan 2, 2024\n\n\n전현지\n\n\n\n\n\n\nNo matching items"
  }
]